(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{357:function(t,s,a){"use strict";a.r(s);var v=a(35),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"frontmatter-title"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),v("h2",{attrs:{id:"垃圾回收策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收策略"}},[t._v("#")]),t._v(" 垃圾回收策略")]),t._v(" "),v("p",[t._v("通常情况下，垃圾回收分为"),v("strong",[t._v("手动回收")]),t._v("和"),v("strong",[t._v("自动回收")]),t._v("两种策略。")]),t._v(" "),v("h3",{attrs:{id:"手动回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#手动回收"}},[t._v("#")]),t._v(" 手动回收")]),t._v(" "),v("p",[t._v("如 C / C++ 使用手动回收策略，何时分配内存、何时销毁内存都是由代码控制的：")]),t._v(" "),v("div",{staticClass:"language-c extra-class"},[v("pre",{pre:!0,attrs:{class:"language-c"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在堆中分配内存")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在堆空间中分配 2048 字节的空间，并将分配后的引用地址保存到 p 中")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 p 指向的内存")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用结束后，销毁这段内存")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("从上面这段 C 代码可以看出，要使用堆中的一块空间，需要先调用 "),v("code",[t._v("malloc")]),t._v(" 函数分配内存，然后再使用；当不需要这块数据的时候，就要手动调用 "),v("code",[t._v("free")]),t._v(" 函数来释放内存。")]),t._v(" "),v("p",[t._v("如果这段数据已经不再需要，但是又没有主动调用 "),v("code",[t._v("free")]),t._v(" 函数来销毁，那么这种情况就被称为"),v("strong",[t._v("内存泄漏")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"自动回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动回收"}},[t._v("#")]),t._v(" 自动回收")]),t._v(" "),v("p",[t._v("另外一种使用的是自动垃圾回收的策略，如 JavaScript、Java、Python 等语言，"),v("strong",[t._v("产生的垃圾数据是由垃圾回收器来释放的")]),t._v("，并不需要手动通过代码来释放。")]),t._v(" "),v("p",[t._v("对于 JavaScript 而言，也正是这个“自动”释放资源的特性带来了很多困惑，也让一些 JavaScript 开发者误以为可以不关心内存管理，这是一个很大的误解。")]),t._v(" "),v("h2",{attrs:{id:"堆栈空间中的垃圾回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆栈空间中的垃圾回收"}},[t._v("#")]),t._v(" 堆栈空间中的垃圾回收")]),t._v(" "),v("h3",{attrs:{id:"调用栈中的数据如何回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#调用栈中的数据如何回收"}},[t._v("#")]),t._v(" 调用栈中的数据如何回收")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("founction "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tome'")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("当执行到第 6 行代码时，其调用栈和堆空间的状态如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:a(600),alt:"执行到 showName 函数时的内存模型"}})]),t._v(" "),v("p",[t._v("可以看出，原始类型的数据被分配到栈中，引用类型的数据被分配到堆中。")]),t._v(" "),v("p",[t._v("当 "),v("code",[t._v("foo")]),t._v(" 函数执行结束之后，"),v("code",[t._v("foo")]),t._v(" 函数的执行上下文会从堆中被销毁掉，那么它是如何被销毁的？")]),t._v(" "),v("p",[t._v("如果执行到 "),v("code",[t._v("showName")]),t._v(" 函数时，JavaScript 引擎会创建 "),v("code",[t._v("showName")]),t._v(" 函数的执行上下文，并将 "),v("code",[t._v("showName")]),t._v(" 函数的执行上下文压入调用栈中，最终执行到 "),v("code",[t._v("showName")]),t._v(" 函数时其调用栈就如上图所示。")]),t._v(" "),v("p",[t._v("与此同时，还有一个"),v("strong",[t._v("记录当前状态执行的指针 (ESP)")]),t._v("，指向调用栈中 "),v("code",[t._v("showName")]),t._v(" 函数的执行上下文，表示当前正在执行 "),v("code",[t._v("showName")]),t._v(" 函数。")]),t._v(" "),v("p",[t._v("接着，当 "),v("code",[t._v("showName")]),t._v(" 函数执行完成之后，函数执行流程进入了 "),v("code",[t._v("foo")]),t._v(" 函数，ESP 的作用就是在此时下移到 "),v("code",[t._v("foo")]),t._v(" 函数的执行上下文，"),v("strong",[t._v("这个下移操作就是销毁 "),v("code",[t._v("showName")]),t._v(" 函数的执行上下文的过程")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(601),alt:"从栈中回收 showName 执行上下文"}})]),t._v(" "),v("p",[t._v("上图中 "),v("code",[t._v("showName")]),t._v(" 的执行上下文虽然保存在栈内存中，但已经是无效内存。")]),t._v(" "),v("p",[t._v("比如当 "),v("code",[t._v("foo")]),t._v(" 函数再次调用另外一个函数时，这块内存会被直接覆盖掉，用来存放另外一个函数的执行上下文。")]),t._v(" "),v("p",[t._v("所以说，当一个函数执行结束之后，"),v("strong",[t._v("JavaScript 引擎会通过向下移动 ESP 来销毁该函数存在栈中的执行上下文")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"堆中的数据如何回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#堆中的数据如何回收"}},[t._v("#")]),t._v(" 堆中的数据如何回收")]),t._v(" "),v("p",[t._v("通过上面的分析，当代码的 "),v("code",[t._v("foo")]),t._v(" 函数执行结束之后，ESP 应该是执行全局执行上下文的。")]),t._v(" "),v("p",[t._v("这样的话，"),v("code",[t._v("showName")]),t._v(" 函数和 "),v("code",[t._v("foo")]),t._v(" 函数的执行上下文就处于无效状态，不过保存在堆中的两个对象依然占用着空间：")]),t._v(" "),v("p",[v("img",{attrs:{src:a(602),alt:"foo 函数执行结束后的内存状态"}})]),t._v(" "),v("p",[v("code",[t._v("1030")]),t._v(" 和 "),v("code",[t._v("1050")]),t._v(" 这两块内存依然被占用。要回收堆中的垃圾数据，需要用到 JavaScript 中的"),v("strong",[t._v("垃圾回收器")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"代际假说和分代收集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代际假说和分代收集"}},[t._v("#")]),t._v(" 代际假说和分代收集")]),t._v(" "),v("p",[t._v("了解 V8 如何实现回收之前，需要先了解下**代际假说 (The Generational Hypothesis)**的内容，这是垃圾回收领域中的一个重要术语，后续垃圾回收的策略都是建立在该假说的基础之上。")]),t._v(" "),v("p",[v("strong",[t._v("代际假说")]),t._v("有以下两个特点：")]),t._v(" "),v("ul",[v("li",[t._v("大部分对象在内存中存在的时间很短。简单来说，就是很多对象一经分配内存，很快就变得不可访问")]),t._v(" "),v("li",[t._v("不死的对象，会活得更久")])]),t._v(" "),v("p",[t._v("通常，垃圾回收算法有很多种，但是并没有哪一种能胜任所有的场景。需要权衡各种场景，根据对象的生存周期的不同而使用不同的算法，以便达到最好的效果。")]),t._v(" "),v("p",[t._v("在 V8 种会把堆分为"),v("strong",[t._v("新生代")]),t._v("和"),v("strong",[t._v("老生代")]),t._v("两个区域，"),v("strong",[t._v("新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象")]),t._v("。")]),t._v(" "),v("p",[t._v("新生区通常只支持 "),v("code",[t._v("1 ~ 8M")]),t._v(" 的容量，而老生区支持的容易就大很多。对于这两块区域，V8 分别使用两个不同的垃圾回收器，以便更高效地实施垃圾回收。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("副垃圾回收器，主要负责新生代的垃圾回收")])]),t._v(" "),v("li",[v("strong",[t._v("主垃圾回收器，主要负责老生代的垃圾回收")])])]),t._v(" "),v("h2",{attrs:{id:"垃圾回收器的工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的工作流程"}},[t._v("#")]),t._v(" 垃圾回收器的工作流程")]),t._v(" "),v("p",[t._v("其实不论什么类型的垃圾回收器，它们都有一套共同的执行流程：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象")])]),t._v(" "),v("li",[v("p",[t._v("回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象")])]),t._v(" "),v("li",[v("p",[t._v("内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，把这些不连续的内存空间称为"),v("strong",[t._v("内存碎片")]),t._v("。")]),t._v(" "),v("p",[t._v("当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存时，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片，但这步其实是可选的，因为有的垃圾回收器不会产生内存碎片。")])])]),t._v(" "),v("h3",{attrs:{id:"副垃圾回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#副垃圾回收器"}},[t._v("#")]),t._v(" 副垃圾回收器")]),t._v(" "),v("p",[t._v("副回收器主要负责新生区的垃圾回收。通常情况下，大多数小的对象都会被分配到新生区，所以说这个区域虽然不大，但是垃圾回收还是比较频繁的。")]),t._v(" "),v("p",[t._v("新生代中使用 "),v("strong",[t._v("Scavenge 算法")]),t._v("处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一般是空闲区域：")]),t._v(" "),v("p",[v("img",{attrs:{src:a(603),alt:"新生区要划分对象区域和空闲区域"}})]),t._v(" "),v("p",[t._v("新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。")]),t._v(" "),v("p",[t._v("在垃圾回收过程中，首先要对对象区域中的垃圾做标记，标记完成之后，就进入垃圾清理阶段。")]),t._v(" "),v("p",[t._v("副垃圾回收器会把这些存活的对象"),v("strong",[t._v("复制")]),t._v("到空闲区域中，同时它还会把这些对象"),v("strong",[t._v("有序")]),t._v("地排列起来。所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区与就没有内存碎片了。")]),t._v(" "),v("p",[t._v("完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成对象区域。")]),t._v(" "),v("p",[t._v("这样就完成了垃圾对象的回收操作，同时这种"),v("strong",[t._v("角色翻转的操作还能让新生代中的这两块区域无限重复使用下去")]),t._v("。")]),t._v(" "),v("p",[t._v("由于新生代中采用的 Scavenge 算法，所以每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域。但复制操作需要时间成本，如果新生区空间设置太大了，那么每次清理时间就会过久，所以为了执行效率，一般新生区的空间会被设置得比较小。")]),t._v(" "),v("p",[t._v("也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了"),v("strong",[t._v("对象晋升策略")]),t._v("，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。")]),t._v(" "),v("h3",{attrs:{id:"主垃圾回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主垃圾回收器"}},[t._v("#")]),t._v(" 主垃圾回收器")]),t._v(" "),v("p",[t._v("主垃圾回收器主要负责老生区中的垃圾回收。除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点：对象占用空间大；对象存活时间长。")]),t._v(" "),v("p",[t._v("由于老生区的对象比较大，若要在老生区中使用 Scavenge 算法进行垃圾回收，复制这些大的对象将会花费比较多的时间，从而导致回收执行效率不高，同时还浪费一般的空间。")]),t._v(" "),v("p",[t._v("因而，主垃圾回收器是采用**标记 - 清除 (Mark-Sweep)**的算法进行垃圾回收的。")]),t._v(" "),v("p",[t._v("标记过程阶段：")]),t._v(" "),v("p",[t._v("标记阶段就是从一组根元素开始，递归遍历这组根元素。在这个遍历过程中，能到达的元素称为"),v("strong",[t._v("活动对象")]),t._v("，没有到达的元素就可以判断为"),v("strong",[t._v("垃圾数据")]),t._v("。")]),t._v(" "),v("p",[t._v("比如最开始的那段代码，当 "),v("code",[t._v("showName")]),t._v(" 函数执行退出之后，这段代码的调用栈和堆空间如下所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:a(604),alt:"标记过程"}})]),t._v(" "),v("p",[t._v("当 "),v("code",[t._v("showName")]),t._v(" 函数执行结束之后，ESP 向下移动，指向了 "),v("code",[t._v("foo")]),t._v(" 函数的执行上下文。此时如果遍历调用栈，是不会找到引用 "),v("code",[t._v("1003")]),t._v(" 地址的变量，也就意味着 "),v("code",[t._v("1003")]),t._v(" 这块数据为垃圾数据，被标记为红色。")]),t._v(" "),v("p",[t._v("由于 "),v("code",[t._v("1050")]),t._v(" 这块数据被变量 "),v("code",[t._v("b")]),t._v(" 引用，所以这块数据会被标记为活动对象。这就是大致的标记过程。")]),t._v(" "),v("p",[t._v("清除过程阶段：")]),t._v(" "),v("p",[t._v("它和副垃圾回收器的垃圾清除过程完全不同，可以理解这个过程是清除掉红色标记数据的过程：")]),t._v(" "),v("p",[v("img",{attrs:{src:a(605),alt:"标记清除过程"}})]),t._v(" "),v("h2",{attrs:{id:"全停顿"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#全停顿"}},[t._v("#")]),t._v(" 全停顿")]),t._v(" "),v("p",[t._v("由于 JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本运行。这种行为叫做"),v("strong",[t._v("全停顿 (Stop-The-World)")]),t._v("。")]),t._v(" "),v("p",[t._v("比如堆中的数据有 "),v("code",[t._v("1.5GB")]),t._v("，V8 实现一次完整的垃圾回收需要 1 秒以上的时间，这也是由于垃圾回收而引起 JavaScript 线程暂停执行的时间。若是这样的时间花销，那么应用的性能和响应能力都会直线下降。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(606),alt:"全停顿"}})]),t._v(" "),v("p",[t._v("在 V8 新生代的垃圾回收中，因其空间较小，且存活对象较少，所以全停顿的影响不大，但老生代就不一样了。")]),t._v(" "),v("p",[t._v("如果在执行垃圾回收的过程中，占用主线程事件过久，就像上面图片展示的那样，花费了 "),v("code",[t._v("200")]),t._v(" 毫秒，在这 "),v("code",[t._v("200")]),t._v(" 毫秒内，主线程是不能做其他事情的。")]),t._v(" "),v("p",[t._v("比如页面正在执行一个 JavaScript 动画，因为垃圾回收器在工作，就会导致这个动画在 "),v("code",[t._v("200")]),t._v(" 毫秒内无法完成，这将会造成页面的卡顿现象。")]),t._v(" "),v("p",[t._v("为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，把这个算法称为"),v("strong",[t._v("增量标记 (Incremental Marking) 算法")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(607),alt:"增量标记"}})]),t._v(" "),v("p",[t._v("使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行。")]),t._v(" "),v("p",[t._v("这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。")])])}),[],!1,null,null,null);s.default=_.exports},600:function(t,s,a){t.exports=a.p+"assets/img/02-garbage-collection.81da1817.png"},601:function(t,s,a){t.exports=a.p+"assets/img/02-esp-down.b1f05732.png"},602:function(t,s,a){t.exports=a.p+"assets/img/02-memory.e6d13280.png"},603:function(t,s,a){t.exports=a.p+"assets/img/02-young-space.4f9310c7.png"},604:function(t,s,a){t.exports=a.p+"assets/img/02-mark-process.29cf65ae.png"},605:function(t,s,a){t.exports=a.p+"assets/img/02-mark-sweep-process.d015db8a.png"},606:function(t,s,a){t.exports=a.p+"assets/img/02-stop-the-world.9898646a.png"},607:function(t,s,a){t.exports=a.p+"assets/img/02-incremental-marking.de117fc9.png"}}]);