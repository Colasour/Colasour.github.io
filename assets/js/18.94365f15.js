(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{358:function(t,a,s){"use strict";s.r(a);var v=s(35),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"frontmatter-title"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),v("h2",{attrs:{id:"编译器和解释器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[t._v("#")]),t._v(" 编译器和解释器")]),t._v(" "),v("p",[t._v("之所以存在编译器和解释器，是因为及其不能直接理解所写的代码，所以在执行程序之前，需要将代码“翻译”成机器能读懂机器语言。")]),t._v(" "),v("p",[t._v("按语言的执行流程，可以把语法划分为编译型语言和解释型语言。")]),t._v(" "),v("p",[t._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件。这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译。比如 C / C++、GO 等都是编译型语言。")]),t._v(" "),v("p",[t._v("解释型语言编写的程序，在每次运行时都需要经过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属性解释型语言。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(608),alt:"编译器和解释器“翻译”代码"}})]),t._v(" "),v("p",[t._v("在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析、生成抽象语法树 (AST)、优化代码，最后再生成处理器能够理解的机器代码。")]),t._v(" "),v("p",[t._v("如果编译成功，将会生成一个可执行文件；如果编译过程发生了语法或者其他的错误，编译器就会抛出异常，最后的二进制文件也不会生成。")]),t._v(" "),v("p",[t._v("在解释型语言的解释过程中，同样解释器会对源代码进行词法分析、语法分析、生成抽象语法树 (AST)，不过它会基于抽象语法树生成字节码，最后再根据字节码来执行程序，输出结果。")]),t._v(" "),v("h2",{attrs:{id:"v8-执行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v8-执行过程"}},[t._v("#")]),t._v(" V8 执行过程")]),t._v(" "),v("p",[v("img",{attrs:{src:s(609),alt:"V8 执行一段代码流程图"}})]),t._v(" "),v("p",[t._v("从图中可以看出，V8 在执行过程中既有"),v("strong",[t._v("解释器 (Ignition)")]),t._v("，又有"),v("strong",[t._v("编译器 (TurboFan)")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"生成抽象语法树-ast"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成抽象语法树-ast"}},[t._v("#")]),t._v(" 生成抽象语法树 (AST)")]),t._v(" "),v("p",[t._v("高级语言是开发者可以理解的语言，但是让编译器或者解释器来理解就非常困难。对于编译器或者解释器来说，它们可以理解的是 AST。")]),t._v(" "),v("p",[t._v("所以无论使用的是解释型语言还是编译型语言，在编译过程中，它们都会生成一个 AST。这和渲染引擎将 HTML 格式文件转换为计算机可以理解的 DOM 树情况类似。")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmyName "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tome'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("这段代码经过 "),v("a",{attrs:{href:"https://resources.jointjs.com/demos/javascript-ast",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript AST"),v("OutboundLink")],1),t._v(" 站点处理后，生成的 AST结构如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:s(610),alt:"抽象语法树 (AST) 结构"}})]),t._v(" "),v("p",[t._v("从图中可以看出，AST 的结构和代码的结构非常相似。其实也可以把 AST 看成代码的结构化表示，编译i其活解释器后续的工作都需要依赖于 AST，而不是源代码。")]),t._v(" "),v("h4",{attrs:{id:"ast-应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ast-应用"}},[t._v("#")]),t._v(" AST 应用")]),t._v(" "),v("p",[t._v("AST 是非常重要的一种数据结构，在很多项目中有着广泛的应用，其中最著名的一个项目是 "),v("strong",[t._v("Babel")]),t._v("。")]),t._v(" "),v("p",[t._v("Babel 是一个被广泛使用的代码转换器，可以将 ES6 代码转为 ES5 代码，这意味着可以现在就用 ES6 编写程序，而不用担心现有环境是否支持 ES6。")]),t._v(" "),v("p",[t._v("Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。")]),t._v(" "),v("p",[t._v("除了 Babel 外，"),v("strong",[t._v("ESLint")]),t._v(" 也使用 AST。ESLint 是一个用来检查 JavaScript 编写规范的插件，其检测流程也是需要将源代码转换为 AST，然后再利用 AST 来检查代码规范化的问题。")]),t._v(" "),v("h4",{attrs:{id:"ast-生成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ast-生成"}},[t._v("#")]),t._v(" AST 生成")]),t._v(" "),v("h5",{attrs:{id:"词法分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[t._v("#")]),t._v(" 词法分析")]),t._v(" "),v("p",[t._v("第一阶段是"),v("strong",[t._v("分词 (tokenize)")]),t._v("，又称为"),v("strong",[t._v("词法分析")]),t._v("，其作用是将一行行的源代码拆解为一个个 "),v("code",[t._v("token")]),t._v("。")]),t._v(" "),v("p",[t._v("所谓 "),v("code",[t._v("token")]),t._v("，指的是语法上不可能再分的、最小的单个字符或字符串。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(611),alt:"分解 token 示意图"}})]),t._v(" "),v("p",[t._v("通过 "),v("code",[t._v("var myName = '极客'")]),t._v(" 简单地定义了一个变量，其中关键字 "),v("code",[t._v("var")]),t._v("、标识符 "),v("code",[t._v("myName")]),t._v("、赋值运算符 "),v("code",[t._v("=")]),t._v("、字符串 "),v("code",[t._v("'极客'")]),t._v(" 四个都是 "),v("code",[t._v("token")]),t._v("，而且它们代表的属性还不一样。")]),t._v(" "),v("h5",{attrs:{id:"语法分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[t._v("#")]),t._v(" 语法分析")]),t._v(" "),v("p",[t._v("第二阶段是"),v("strong",[t._v("解析 (parse)")]),t._v("，又称为"),v("strong",[t._v("语法分析")]),t._v("，其作用是将上一步生成的 "),v("code",[t._v("token")]),t._v(" 数据，根据语法规则转换为 AST。")]),t._v(" "),v("p",[t._v("如果源码符合语法规则，这一步就会顺利生成。但如果源码存放语法错误，这一步就会终止，并抛出一个“语法错误”。")]),t._v(" "),v("p",[t._v("这就是 AST 的生成过程，先分词，再解析。")]),t._v(" "),v("h3",{attrs:{id:"生成字节码-bytecode"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码-bytecode"}},[t._v("#")]),t._v(" 生成字节码 (Bytecode)")]),t._v(" "),v("p",[t._v("有了 AST 和执行上下文，解释器 (Ignition) 就登场了，它会根据 AST 生成字节码，并解释执行字节码。")]),t._v(" "),v("p",[t._v("其实一开始 V8 并没有字节码，而是直接将 AST 转换为机器码。由于执行机器码的效率是非常高的，所以这种方式在发布后的一段时间内运行效果非常好。")]),t._v(" "),v("p",[t._v("但随着 Chrome 在手机上的广泛普及，特别是运行在 "),v("code",[t._v("512M")]),t._v(" 内存的手机上，内存占用问题也暴露出来，因为 V8 需要消耗大量的内存来存放转换后的机器码。")]),t._v(" "),v("p",[t._v("为了解决内存占用问题，V8 团队大幅重构了引擎架构，引入字节码，并且抛弃了之前的编译器，最终花了将近四年的时间，实现了现在的这套架构。")]),t._v(" "),v("p",[v("strong",[t._v("字节码就是介于 AST 和机器码之间的一种代码")]),t._v("。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(612),alt:"字节码与机器码占用空间对比"}})]),t._v(" "),v("p",[t._v("从图中可以看出，机器码所占用的空间远远超过了字节码，所以"),v("strong",[t._v("使用字节码可以减少系统的内存使用")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"执行代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[t._v("#")]),t._v(" 执行代码")]),t._v(" "),v("p",[t._v("通常，如果有一段第一次执行的字节码，解释器 (Ignition) 会逐条解释执行。")]),t._v(" "),v("p",[t._v("在执行字节码的过程中，如果发现有"),v("strong",[t._v("热点代码 (HotSpot)")]),t._v("，比如一段代码被重复执行多次，那么后台的编译器 (TurboFan) 就会把该段热点的字节码编译为高效的机器码。")]),t._v(" "),v("p",[t._v("然后当再次执行这段被优化的代码时，只需要执行编译后的机器码即可，这样就大大提升了代码的执行效率。")]),t._v(" "),v("p",[t._v("字节码配合解释器和编译器是最近一段时间很火的技术。比如 Java 和 Python 的虚拟机也都是基于这种技术实现的，把这种技术称为"),v("strong",[t._v("即时编译 (JIT)")]),t._v("。")]),t._v(" "),v("p",[t._v("对于 JavaScript 工作引擎，除了 V8 使用了“字节码 + JIT”技术之外，苹果的 SquirrelFish Extreme 和 Mozilla 的 SpiderMonkey 也都使用了该技术。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(613),alt:"即时编译 (JIT) 技术"}})]),t._v(" "),v("h2",{attrs:{id:"javascript-性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript-性能优化"}},[t._v("#")]),t._v(" JavaScript 性能优化")]),t._v(" "),v("p",[t._v("在 V8 诞生之初，出现过一系列针对 V8 而专门优化 JavaScript 性能的方案，比如隐藏类、内联缓存等概念都是那时候提出的。")]),t._v(" "),v("p",[t._v("不过随着 V8 的架构调整，越来越不需要这些微优化策略了。")]),t._v(" "),v("p",[t._v("相反，对于优化 JavaScript 引擎，应该将优化的中心聚焦在单次脚本的执行时间和脚本的网络下载上，主要关注以下三点内容：")]),t._v(" "),v("ul",[v("li",[t._v("提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面快速响应交互")]),t._v(" "),v("li",[t._v("避免大的内联脚本，因为在解析 HTML 的过程中，解析和编译也会占用主线程")]),t._v(" "),v("li",[t._v("减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存")])])])}),[],!1,null,null,null);a.default=_.exports},608:function(t,a,s){t.exports=s.p+"assets/img/03-code-translation.4e196603.png"},609:function(t,a,s){t.exports=s.p+"assets/img/03-v8-code-process.550e783c.png"},610:function(t,a,s){t.exports=s.p+"assets/img/03-ast.ec674a58.png"},611:function(t,a,s){t.exports=s.p+"assets/img/03-token.790d383e.png"},612:function(t,a,s){t.exports=s.p+"assets/img/03-bytecode-mechinecode.7686ff0b.png"},613:function(t,a,s){t.exports=s.p+"assets/img/03-jit.c401f7ed.png"}}]);