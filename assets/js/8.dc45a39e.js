(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{330:function(t,a,s){"use strict";s.r(a);var n=s(35),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"frontmatter-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),n("h2",{attrs:{id:"javascript-执行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-执行流程"}},[t._v("#")]),t._v(" JavaScript 执行流程")]),t._v(" "),n("p",[t._v("一段 JavaScript 代码在执行之前需要被 JavaScript 引擎编译，编译完成之后，才会进入执行阶段。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(562),alt:"JavaScript 执行流程"}})]),t._v(" "),n("p",[t._v("从上图可以看出，输入一段代码，经过编译后，会生成两部分内容："),n("strong",[t._v("执行上下文 (Execution context)"),n("strong",[t._v("和")]),t._v("可执行代码")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"编译阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段"}},[t._v("#")]),t._v(" 编译阶段")]),t._v(" "),n("p",[t._v("执行上下文是 JavaScript 执行一段代码的运行环境，比如调用一个函数，就会进入这个函数的执行上下文，确定该函数在执行期间用到的诸如 "),n("code",[t._v("this")]),t._v("、变量、对象以及函数等。")]),t._v(" "),n("p",[t._v("在执行上下文中存在一个"),n("strong",[t._v("变量环境的对象 (Variable Environment)")]),t._v("，该对象保存了变量提升的内容。可以简单地把变量环境对象看成是如下结构：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("VariableEnvironment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  myname "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  showName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("JavaScript 引擎会把声明意外的代码编译为字节码，大致可类比如下的模拟代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyname "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v("\n")])])]),n("h3",{attrs:{id:"执行阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),n("p",[t._v("JavaScript 引擎开始执行“可执行代码”，按照顺序一行一行地执行：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("当执行到 "),n("code",[t._v("showName")]),t._v(" 函数时，JavaScript 引擎便开始在变量环境对象中查找该函数，输出 "),n("code",[t._v("showName")]),t._v(" 函数的返回结果")])]),t._v(" "),n("li",[n("p",[t._v("接着打印 "),n("code",[t._v("myname")]),t._v(" 变量，JavaScript 引擎继续在变量环境对象中查找该变量，输出 "),n("code",[t._v("myname")]),t._v(" 变量的值 "),n("code",[t._v("undefined")])])]),t._v(" "),n("li",[n("p",[t._v("接着执行赋值语句 "),n("code",[t._v("myname = 'Tom'")]),t._v("，赋值后变量环境中的 "),n("code",[t._v("myname")]),t._v(" 属性值改变为 "),n("code",[t._v("‘Tom’")]),t._v("，变量环境对象如下所示：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("VariableEnvironment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  myname "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  showName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("p",[t._v("问题是哪些情况下代码才算是“一段”代码，才会在执行之前进行编译并创建执行上下文。")]),t._v(" "),n("p",[t._v("一般来说，有这么三种情况：")]),t._v(" "),n("ul",[n("li",[t._v("当执行全局代码时，编译全局代码并创建"),n("strong",[t._v("全局执行上下文")]),t._v("。在整个页面的生存周期内，全局执行上下文只有一份。")]),t._v(" "),n("li",[t._v("当调用一个函数时，函数体内的代码被编译并创建"),n("strong",[t._v("函数执行上下文")]),t._v("。一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁")]),t._v(" "),n("li",[t._v("当使用 "),n("code",[t._v("eval")]),t._v(" 函数时，"),n("code",[t._v("eval")]),t._v(" 的代码也会被编译并创建 "),n("strong",[t._v("eval 执行上下文")]),t._v("。")])]),t._v(" "),n("h2",{attrs:{id:"函数调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数调用"}},[t._v("#")]),t._v(" 函数调用")]),t._v(" "),n("p",[t._v("函数调用就是运行一个函数，具体使用方式是使用函数名称跟着一对小括号，如下简单的示例代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("在执行函数 "),n("code",[t._v("add")]),t._v(" 之前，JavaScript 引擎会创建全局执行上下文，它包含了声明的函数和变量：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(563),alt:"全局执行上下文"}})]),t._v(" "),n("p",[t._v("从图中可以看出，代码中全局变量和函数都保存在全局上下文的变量环境中。")]),t._v(" "),n("p",[t._v("执行上下文准备好后，便开始执行全局代码。当执行到 "),n("code",[t._v("add")]),t._v(" 这儿时，JavaScript 判断这是一个函数调用，将执行以下操作：")]),t._v(" "),n("ul",[n("li",[t._v("从"),n("strong",[t._v("全局执行上下文")]),t._v("中取出 "),n("code",[t._v("add")]),t._v(" 函数代码")]),t._v(" "),n("li",[t._v("对 "),n("code",[t._v("add")]),t._v(" 函数进行编译，并创建"),n("strong",[t._v("该函数的执行上下文")]),t._v("和"),n("strong",[t._v("可执行代码")])]),t._v(" "),n("li",[t._v("执行代码，输出结果")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(564),alt:"函数调用过程"}})]),t._v(" "),n("p",[t._v("就这样，当执行到 "),n("code",[t._v("add")]),t._v(" 函数时，就有两个执行上下文——全局执行上下文和 "),n("code",[t._v("add")]),t._v(" 函数执行上下文。")]),t._v(" "),n("h2",{attrs:{id:"执行上下文栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),n("p",[t._v("在函数调用的时候，可能会存在多个执行上下文，JavaScript 引擎如何管理这些这些执行上下文？")]),t._v(" "),n("p",[t._v("答案是 JavaScript 引擎创建了"),n("strong",[t._v("执行上下文栈 (Execution context stack, ECS)")]),t._v(" 来管理执行上下文。")]),t._v(" "),n("p",[t._v("在执行上下文创建好后，JavaScript 引擎会将其压入栈中，又称为"),n("strong",[t._v("调用栈")]),t._v("。")]),t._v(" "),n("p",[t._v("通过以下示例理解调用栈：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" d\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("上面这段代码中 "),n("code",[t._v("addAll")]),t._v(" 函数中调用了 "),n("code",[t._v("add")]),t._v(" 函数。下面试着分析调用栈的状态变化情况：")]),t._v(" "),n("p",[n("strong",[t._v("第一步，创建全局上下文，并将其压入栈底")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(565),alt:"全局执行上下文压栈"}})]),t._v(" "),n("p",[t._v("变量 "),n("code",[t._v("a")]),t._v("、函数 "),n("code",[t._v("add")]),t._v(" 和 "),n("code",[t._v("addAll")]),t._v(" 都保存到全局上下文的变量环境对象中。")]),t._v(" "),n("p",[t._v("全局执行上下文压入到调用栈后，JavaScript 引擎便开始执行全局代码。首先会执行 "),n("code",[t._v("a = 2")]),t._v(" 的赋值操作：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(566),alt:"赋值操作改变执行上下文中的值"}})]),t._v(" "),n("p",[n("strong",[t._v("第二步，调用 "),n("code",[t._v("addAll")]),t._v(" 函数")])]),t._v(" "),n("p",[t._v("当调用 "),n("code",[t._v("addAll")]),t._v(" 函数时，JavaScript 引擎会编译该函数，并为其创建一个执行上下文，最后将该函数的执行上下文压入栈中：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(567),alt:"执行 addAll 函数时的调用栈"}})]),t._v(" "),n("p",[n("code",[t._v("addAll")]),t._v(" 函数的执行上下文创建后，便进入了函数代码的执行阶段。这里先执行的是 "),n("code",[t._v("d = 10")]),t._v(" 的赋值操作，执行语句会将 "),n("code",[t._v("addAll")]),t._v(" 函数执行上下文中的 "),n("code",[t._v("d")]),t._v(" 由 "),n("code",[t._v("undefined")]),t._v(" 变成了 "),n("code",[t._v("10")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("第三步，执行 "),n("code",[t._v("add")]),t._v(" 函数")])]),t._v(" "),n("p",[t._v("当调用 "),n("code",[t._v("add")]),t._v(" 函数时，同样会为其创建执行上下文，并将其压入调用栈：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(568),alt:"执行 add 函数的调用栈"}})]),t._v(" "),n("p",[t._v("当 "),n("code",[t._v("add")]),t._v(" 函数返回时，该函数的执行上下文就会从栈顶弹出，并将 "),n("code",[t._v("result")]),t._v(" 的值设置为 "),n("code",[t._v("add")]),t._v(" 函数的返回值，也就是 "),n("code",[t._v("9")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(569),alt:"add 函数执行结束时的调用栈"}})]),t._v(" "),n("p",[t._v("紧接着 "),n("code",[t._v("addAll")]),t._v(" 执行最后一个相加操作后并返回，"),n("code",[t._v("addAll")]),t._v(" 的执行上下文也会从栈顶部弹出，此时调用栈中就只剩下全局上下文：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(570),alt:"addAll 函数执行结束时的调用栈"}})]),t._v(" "),n("p",[t._v("至此，整个 JavaScript 流程执行结束。")]),t._v(" "),n("h2",{attrs:{id:"调试调用栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调试调用栈"}},[t._v("#")]),t._v(" 调试调用栈")]),t._v(" "),n("p",[t._v("调用栈是 JavaScript 引擎追踪函数执行的一种机制，当一次有多个函数被调用时，通过调用栈就能够追踪哪个函数正在被执行以及各函数之间的调用关系。")]),t._v(" "),n("h3",{attrs:{id:"利用浏览器查看调用栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用浏览器查看调用栈"}},[t._v("#")]),t._v(" 利用浏览器查看调用栈")]),t._v(" "),n("p",[t._v("执行一段复杂的代码时，可能很难从代码文件中分析其调用关系，此时可以通过加入断点，查看该函数的调用栈。")]),t._v(" "),n("p",[t._v("具体做法是，Chrome 中打开“开发者工具”，点击 "),n("code",[t._v("Source")]),t._v(" 标签，选择 JavaScript 代码的页面，在第 3 行加上断点并刷新页面。")]),t._v(" "),n("p",[t._v("可以看到当执行到 "),n("code",[t._v("add")]),t._v(" 函数时，执行流程就暂停了。这时通过右边 "),n("code",[t._v("call stack")]),t._v(" 可以查看当前的调用栈的情况：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(571),alt:"查看函数调用关系"}})]),t._v(" "),n("p",[t._v("栈的最底部 "),n("code",[t._v("anonymous")]),t._v(" 是全局的函数入口；中间是 "),n("code",[t._v("addAll")]),t._v(" 函数；顶部是 "),n("code",[t._v("add")]),t._v(" 函数。")]),t._v(" "),n("h3",{attrs:{id:"console-trace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#console-trace"}},[t._v("#")]),t._v(" console.trace")]),t._v(" "),n("p",[n("code",[t._v("console.trace")]),t._v(" 输出当前的函数调用关系。比如在示例代码中的 "),n("code",[t._v("add")]),t._v(" 函数里面加上 "),n("code",[t._v("console.trace()")]),t._v("，就可以看到控制台输出的结果：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(572),alt:"使用 trace 函数输出当前调用栈信息"}})])])}),[],!1,null,null,null);a.default=e.exports},562:function(t,a,s){t.exports=s.p+"assets/img/02-execute-process.28842a45.png"},563:function(t,a,s){t.exports=s.p+"assets/img/02-global-execute-context.5e833cbf.png"},564:function(t,a,s){t.exports=s.p+"assets/img/02-function-transfer-process.82b6534a.png"},565:function(t,a,s){t.exports=s.p+"assets/img/02-call-stack-1.d4924617.png"},566:function(t,a,s){t.exports=s.p+"assets/img/02-call-stack-2.40465a18.png"},567:function(t,a,s){t.exports=s.p+"assets/img/02-call-stack-3.d7e84dc8.png"},568:function(t,a,s){t.exports=s.p+"assets/img/02-call-stack-4.2cc200f6.png"},569:function(t,a,s){t.exports=s.p+"assets/img/02-call-stack-5.42279e0c.png"},570:function(t,a,s){t.exports=s.p+"assets/img/02-call-stack-6.582f5ba5.png"},571:function(t,a,s){t.exports=s.p+"assets/img/02-debugger-stack.6deb9e8f.png"},572:function(t,a,s){t.exports=s.p+"assets/img/02-trace.c844ca8f.png"}}]);