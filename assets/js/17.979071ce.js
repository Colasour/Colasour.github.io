(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{354:function(t,s,a){"use strict";a.r(s);var n=a(35),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"frontmatter-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),n("h2",{attrs:{id:"内存空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存空间"}},[t._v("#")]),t._v(" 内存空间")]),t._v(" "),n("p",[t._v("在 JavaScript 的执行过程种，主要有三种类型内存空间，分别是"),n("strong",[t._v("代码空间")]),t._v("、"),n("strong",[t._v("栈空间")]),t._v("和"),n("strong",[t._v("堆空间")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(590),alt:"JavaScript 内存模型"}})]),t._v(" "),n("h2",{attrs:{id:"栈、堆空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#栈、堆空间"}},[t._v("#")]),t._v(" 栈、堆空间")]),t._v(" "),n("p",[t._v("栈空间就是反复提及的调用栈，用来存储执行上下文。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tome'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("执行到第 3 行代码时，其调用栈的状态：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(591),alt:"执行到第 3 行时的调用栈"}})]),t._v(" "),n("p",[t._v("当执行到第 3 行时，变量 "),n("code",[t._v("a")]),t._v(" 和变量 "),n("code",[t._v("b")]),t._v(" 的值都被保存在执行上下文种，而执行上下文又被压入到栈中，因此也可以认为变量 "),n("code",[t._v("a")]),t._v(" 和变量 "),n("code",[t._v("b")]),t._v(" 的值都是存放在栈中的。")]),t._v(" "),n("p",[t._v("接着执行第 4 行代码，由于 JavaScript 引擎判断右边的值是一个"),n("strong",[t._v("引用类型")]),t._v("，此时处理的情况就不一样。")]),t._v(" "),n("p",[t._v("JavaScript 引擎并不是直接将该对象存放到变量环境中，而是将它分配到堆空间里面，分配后该对象会有一个在“堆”中的地址，然后再将该数据的地址写进 "),n("code",[t._v("c")]),t._v(" 的变量值。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(592),alt:"对象变量是“堆”来存储"}})]),t._v(" "),n("p",[t._v("对象类型是存放在堆空间的，在栈空间中知识保留了对象的引用地址。JavaScript 需要访问数据时，是通过栈中的引用地址去访问，相当于多了一道转手流程。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[n("strong",[t._v("原始类型的数据值都是直接存放在“栈”中，引用类型的值是存放在“堆”中。")])])]),t._v(" "),n("h3",{attrs:{id:"堆栈空间的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#堆栈空间的作用"}},[t._v("#")]),t._v(" 堆栈空间的作用")]),t._v(" "),n("p",[t._v("为什么一定要分“堆”和“栈”两个存储空间？所有数据直接存放在“栈”中不可以？")]),t._v(" "),n("p",[t._v("答案是不可以的。这是因为 JavaScript 引擎需要"),n("strong",[t._v("用栈来维护程序执行期间的上下文状态")]),t._v("。如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。")]),t._v(" "),n("p",[t._v("比如文中的 "),n("code",[t._v("foo")]),t._v(" 函数执行结束，JavaScript 引擎需要离开当前的执行上下文，只需要将指针下移到上个执行上下文的地址即可，"),n("code",[t._v("foo")]),t._v(" 函数执行上下文栈区空间全部回收。具体可以参考下图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(593),alt:"调用栈中切换执行上下文状态"}})]),t._v(" "),n("p",[t._v("通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据；而引用类型的数据占用的空间比较大，所以这一类数据会被存放到堆中。堆空间很大，能存放很多大的数据，缺点是分配内存和回收都会占用一定的时间。")]),t._v(" "),n("h3",{attrs:{id:"引用赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用赋值"}},[t._v("#")]),t._v(" 引用赋值")]),t._v(" "),n("p",[t._v("在 JavaScript 中，赋值操作和其他语言有很大的不同，"),n("strong",[t._v("原始类型的赋值会完整赋值变量值，而引用类型的赋值是复制引用地址")]),t._v("。")]),t._v(" "),n("p",[t._v("因此上面代码块里 "),n("code",[t._v("d = c")]),t._v(" 的操作就是把 "),n("code",[t._v("c")]),t._v(" 的引用地址赋值给 "),n("code",[t._v("d")]),t._v("：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(594),alt:"引用赋值"}})]),t._v(" "),n("p",[t._v("变量 "),n("code",[t._v("c")]),t._v(" 和变量 "),n("code",[t._v("d")]),t._v(" 都指向了同一个堆中的对象，所以这可以很好地解释下面这段代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 1")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n    a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tome'")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 'Tome'")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 'Tome'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("通过 "),n("code",[t._v("a")]),t._v(" 修改 "),n("code",[t._v("name")]),t._v(" 的值，变量 "),n("code",[t._v("b")]),t._v(" 的值也跟着改变，归根结底它们是同一个对象。")]),t._v(" "),n("h2",{attrs:{id:"再谈闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#再谈闭包"}},[t._v("#")]),t._v(" 再谈闭包")]),t._v(" "),n("p",[t._v("作用域的原始类型数据会被存储到栈空间，引用类型会被存储到堆空间。基于这两点的认知，再深入一步，探讨下闭包的内存模型。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" test2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" innerBar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            myName "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newName\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" myName\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" innerBar\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tome'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("当执行这段代码时，应该有过这样的分析：")]),t._v(" "),n("p",[t._v("由于变量 "),n("code",[t._v("myName")]),t._v("、"),n("code",[t._v("test1")]),t._v("、"),n("code",[t._v("test2")]),t._v(" 都是原始类型数据，所以在执行 "),n("code",[t._v("foo")]),t._v(" 函数时，它们会被压入到调用栈中；")]),t._v(" "),n("p",[t._v("当 "),n("code",[t._v("foo")]),t._v(" 函数执行结束之后，调用栈中 "),n("code",[t._v("foo")]),t._v(" 函数的执行上下文会被销毁，其内部变量 "),n("code",[t._v("myName")]),t._v("、"),n("code",[t._v("test1")]),t._v("、"),n("code",[t._v("test2")]),t._v(" 也应该一同被销毁。")]),t._v(" "),n("p",[t._v("但当 "),n("code",[t._v("foo")]),t._v(" 函数的执行上下文销毁时，由于 "),n("code",[t._v("foo")]),t._v(" 函数产生了闭包，所以变量 "),n("code",[t._v("myName")]),t._v(" 和 "),n("code",[t._v("test1")]),t._v(" 并没有被销毁，而是保存在内存中，该如何解释这个现象？")]),t._v(" "),n("p",[t._v("站在内存模型的角度来分析这段代码的执行流程：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("当 JavaScript 引擎执行到 "),n("code",[t._v("foo")]),t._v(" 函数时，首先会编译，并创建一个空执行上下文")])]),t._v(" "),n("li",[n("p",[t._v("在编译过程中，遇到内部函数 "),n("code",[t._v("setName")]),t._v("，JavaScript 引擎还要对内部函数做一次快速的词法扫描，发现该内部函数引用了 "),n("code",[t._v("foo")]),t._v(" 函数中的 "),n("code",[t._v("myName")]),t._v(" 变量。")]),t._v(" "),n("p",[t._v("由于是内部函数引用了外部函数的变量，所以 JavaScript 引擎判断这是一个闭包。于是在"),n("strong",[t._v("堆空间")]),t._v("创建一个 "),n("code",[t._v('"closure(foo)"')]),t._v(" 的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存 "),n("code",[t._v("myName")]),t._v(" 变量")])]),t._v(" "),n("li",[n("p",[t._v("接着继续扫描到 "),n("code",[t._v("getName")]),t._v(" 方法时，发现该函数内部也引用变量 "),n("code",[t._v("test1")]),t._v("。于是 JavaScript 引擎又将 "),n("code",[t._v("test1")]),t._v(" 添加到 "),n("code",[t._v('"closure(foo)"')]),t._v(" 对象中。此时堆中的 "),n("code",[t._v('"closure(foo)"')]),t._v(" 对象中就包含了 "),n("code",[t._v("myName")]),t._v(" 和 "),n("code",[t._v("test1")]),t._v(" 两个变量")])]),t._v(" "),n("li",[n("p",[t._v("由于 "),n("code",[t._v("test2")]),t._v(" 没有被内部函数引用，所以 "),n("code",[t._v("test2")]),t._v(" 依然保存在调用栈中")])])]),t._v(" "),n("p",[t._v("通过上面的分析，可以画出执行到 "),n("code",[t._v("foo")]),t._v(" 函数中 "),n("code",[t._v("return innerBar")]),t._v(" 语句时的调用栈状态：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(595),alt:"闭包的产生过程"}})]),t._v(" "),n("p",[t._v("可以看出，当执行到 "),n("code",[t._v("foo")]),t._v(" 函数时，闭包就产生了。")]),t._v(" "),n("p",[t._v("当 "),n("code",[t._v("foo")]),t._v(" 函数执行结束之后，返回的 "),n("code",[t._v("getName")]),t._v(" 和 "),n("code",[t._v("setName")]),t._v(" 方法都引用 "),n("code",[t._v('"closure(foo)"')]),t._v(" 对象，因此即使 "),n("code",[t._v("foo")]),t._v(" 函数退出了，"),n("code",[t._v('"closure(foo)"')]),t._v(" 依然被其内部的 "),n("code",[t._v("getName")]),t._v(" 和 "),n("code",[t._v("setName")]),t._v(" 方法引用。")]),t._v(" "),n("p",[t._v("所以在下次调用 "),n("code",[t._v("bar.setName")]),t._v(" 或者 "),n("code",[t._v("bar.getName")]),t._v(" 时，创建的执行上下文中就包含了 "),n("code",[t._v('"closure(foo)"')]),t._v("。")]),t._v(" "),n("p",[t._v("总的来说，产生闭包的核心有两步：第一步是需要扫描内部函数；第二步是把内部函数引用的外部变量保存到堆中。")])])}),[],!1,null,null,null);s.default=e.exports},590:function(t,s,a){t.exports=a.p+"assets/img/01-memory-model.6293f531.png"},591:function(t,s,a){t.exports=a.p+"assets/img/01-stack.f059c50f.png"},592:function(t,s,a){t.exports=a.p+"assets/img/01-heap.b31d3e18.png"},593:function(t,s,a){t.exports=a.p+"assets/img/01-switch-execute-context.d7153d00.png"},594:function(t,s,a){t.exports=a.p+"assets/img/01-reference-assignment.d67d7641.png"},595:function(t,s,a){t.exports=a.p+"assets/img/01-closure.ddcb9ef4.png"}}]);